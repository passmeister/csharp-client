/* 
 * Demo Client for Passmeister Apple Wallet and Google Wallet API
 *
 * [www.passmeister.com](https://www.passmeister.com).
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPassApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
        /// </summary>
        /// <remarks>
        /// This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass (provided by you when creating the pass or automatically set by passmeister) (optional)</param>
        /// <returns></returns>
        void CreateOrUpdatePass (Object passTypeId, Object passId = null);

        /// <summary>
        /// This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
        /// </summary>
        /// <remarks>
        /// This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass (provided by you when creating the pass or automatically set by passmeister) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateOrUpdatePassWithHttpInfo (Object passTypeId, Object passId = null);
        /// <summary>
        /// Delete pass by pass id.
        /// </summary>
        /// <remarks>
        /// Delete pass by pass id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass</param>
        /// <returns></returns>
        void DeletePass (Object passTypeId, Object passId);

        /// <summary>
        /// Delete pass by pass id.
        /// </summary>
        /// <remarks>
        /// Delete pass by pass id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePassWithHttpInfo (Object passTypeId, Object passId);
        /// <summary>
        /// Get pass information by pass id.
        /// </summary>
        /// <remarks>
        /// Get pass information by pass id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass</param>
        /// <returns></returns>
        void GetPass (Object passTypeId, Object passId);

        /// <summary>
        /// Get pass information by pass id.
        /// </summary>
        /// <remarks>
        /// Get pass information by pass id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetPassWithHttpInfo (Object passTypeId, Object passId);
        /// <summary>
        /// Retrieve the list of active pass ids for a given pass type.
        /// </summary>
        /// <remarks>
        /// Retrieve the list of active pass ids for a given pass type.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns></returns>
        void PassList (Object passTypeId, Object page = null, Object limit = null);

        /// <summary>
        /// Retrieve the list of active pass ids for a given pass type.
        /// </summary>
        /// <remarks>
        /// Retrieve the list of active pass ids for a given pass type.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PassListWithHttpInfo (Object passTypeId, Object page = null, Object limit = null);
        /// <summary>
        /// Send updates to all active passes for a given pass type.
        /// </summary>
        /// <remarks>
        /// For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <returns></returns>
        void PassSync (Object passTypeId);

        /// <summary>
        /// Send updates to all active passes for a given pass type.
        /// </summary>
        /// <remarks>
        /// For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PassSyncWithHttpInfo (Object passTypeId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
        /// </summary>
        /// <remarks>
        /// This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass (provided by you when creating the pass or automatically set by passmeister) (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateOrUpdatePassAsync (Object passTypeId, Object passId = null);

        /// <summary>
        /// This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
        /// </summary>
        /// <remarks>
        /// This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass (provided by you when creating the pass or automatically set by passmeister) (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateOrUpdatePassAsyncWithHttpInfo (Object passTypeId, Object passId = null);
        /// <summary>
        /// Delete pass by pass id.
        /// </summary>
        /// <remarks>
        /// Delete pass by pass id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePassAsync (Object passTypeId, Object passId);

        /// <summary>
        /// Delete pass by pass id.
        /// </summary>
        /// <remarks>
        /// Delete pass by pass id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePassAsyncWithHttpInfo (Object passTypeId, Object passId);
        /// <summary>
        /// Get pass information by pass id.
        /// </summary>
        /// <remarks>
        /// Get pass information by pass id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetPassAsync (Object passTypeId, Object passId);

        /// <summary>
        /// Get pass information by pass id.
        /// </summary>
        /// <remarks>
        /// Get pass information by pass id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPassAsyncWithHttpInfo (Object passTypeId, Object passId);
        /// <summary>
        /// Retrieve the list of active pass ids for a given pass type.
        /// </summary>
        /// <remarks>
        /// Retrieve the list of active pass ids for a given pass type.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PassListAsync (Object passTypeId, Object page = null, Object limit = null);

        /// <summary>
        /// Retrieve the list of active pass ids for a given pass type.
        /// </summary>
        /// <remarks>
        /// Retrieve the list of active pass ids for a given pass type.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PassListAsyncWithHttpInfo (Object passTypeId, Object page = null, Object limit = null);
        /// <summary>
        /// Send updates to all active passes for a given pass type.
        /// </summary>
        /// <remarks>
        /// For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PassSyncAsync (Object passTypeId);

        /// <summary>
        /// Send updates to all active passes for a given pass type.
        /// </summary>
        /// <remarks>
        /// For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PassSyncAsyncWithHttpInfo (Object passTypeId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PassApi : IPassApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PassApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PassApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PassApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PassApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes. This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass (provided by you when creating the pass or automatically set by passmeister) (optional)</param>
        /// <returns></returns>
        public void CreateOrUpdatePass (Object passTypeId, Object passId = null)
        {
             CreateOrUpdatePassWithHttpInfo(passTypeId, passId);
        }

        /// <summary>
        /// This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes. This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass (provided by you when creating the pass or automatically set by passmeister) (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateOrUpdatePassWithHttpInfo (Object passTypeId, Object passId = null)
        {
            // verify the required parameter 'passTypeId' is set
            if (passTypeId == null)
                throw new ApiException(400, "Missing required parameter 'passTypeId' when calling PassApi->CreateOrUpdatePass");

            var localVarPath = "/pass";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (passTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "passTypeId", passTypeId)); // query parameter
            if (passId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "passId", passId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdatePass", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes. This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass (provided by you when creating the pass or automatically set by passmeister) (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateOrUpdatePassAsync (Object passTypeId, Object passId = null)
        {
             await CreateOrUpdatePassAsyncWithHttpInfo(passTypeId, passId);

        }

        /// <summary>
        /// This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes. This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass (provided by you when creating the pass or automatically set by passmeister) (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateOrUpdatePassAsyncWithHttpInfo (Object passTypeId, Object passId = null)
        {
            // verify the required parameter 'passTypeId' is set
            if (passTypeId == null)
                throw new ApiException(400, "Missing required parameter 'passTypeId' when calling PassApi->CreateOrUpdatePass");

            var localVarPath = "/pass";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (passTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "passTypeId", passTypeId)); // query parameter
            if (passId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "passId", passId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrUpdatePass", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete pass by pass id. Delete pass by pass id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass</param>
        /// <returns></returns>
        public void DeletePass (Object passTypeId, Object passId)
        {
             DeletePassWithHttpInfo(passTypeId, passId);
        }

        /// <summary>
        /// Delete pass by pass id. Delete pass by pass id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePassWithHttpInfo (Object passTypeId, Object passId)
        {
            // verify the required parameter 'passTypeId' is set
            if (passTypeId == null)
                throw new ApiException(400, "Missing required parameter 'passTypeId' when calling PassApi->DeletePass");
            // verify the required parameter 'passId' is set
            if (passId == null)
                throw new ApiException(400, "Missing required parameter 'passId' when calling PassApi->DeletePass");

            var localVarPath = "/pass";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (passTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "passTypeId", passTypeId)); // query parameter
            if (passId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "passId", passId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePass", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete pass by pass id. Delete pass by pass id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePassAsync (Object passTypeId, Object passId)
        {
             await DeletePassAsyncWithHttpInfo(passTypeId, passId);

        }

        /// <summary>
        /// Delete pass by pass id. Delete pass by pass id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePassAsyncWithHttpInfo (Object passTypeId, Object passId)
        {
            // verify the required parameter 'passTypeId' is set
            if (passTypeId == null)
                throw new ApiException(400, "Missing required parameter 'passTypeId' when calling PassApi->DeletePass");
            // verify the required parameter 'passId' is set
            if (passId == null)
                throw new ApiException(400, "Missing required parameter 'passId' when calling PassApi->DeletePass");

            var localVarPath = "/pass";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (passTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "passTypeId", passTypeId)); // query parameter
            if (passId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "passId", passId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePass", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get pass information by pass id. Get pass information by pass id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass</param>
        /// <returns></returns>
        public void GetPass (Object passTypeId, Object passId)
        {
             GetPassWithHttpInfo(passTypeId, passId);
        }

        /// <summary>
        /// Get pass information by pass id. Get pass information by pass id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetPassWithHttpInfo (Object passTypeId, Object passId)
        {
            // verify the required parameter 'passTypeId' is set
            if (passTypeId == null)
                throw new ApiException(400, "Missing required parameter 'passTypeId' when calling PassApi->GetPass");
            // verify the required parameter 'passId' is set
            if (passId == null)
                throw new ApiException(400, "Missing required parameter 'passId' when calling PassApi->GetPass");

            var localVarPath = "/pass";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (passTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "passTypeId", passTypeId)); // query parameter
            if (passId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "passId", passId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPass", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get pass information by pass id. Get pass information by pass id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetPassAsync (Object passTypeId, Object passId)
        {
             await GetPassAsyncWithHttpInfo(passTypeId, passId);

        }

        /// <summary>
        /// Get pass information by pass id. Get pass information by pass id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="passId">id of the pass</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPassAsyncWithHttpInfo (Object passTypeId, Object passId)
        {
            // verify the required parameter 'passTypeId' is set
            if (passTypeId == null)
                throw new ApiException(400, "Missing required parameter 'passTypeId' when calling PassApi->GetPass");
            // verify the required parameter 'passId' is set
            if (passId == null)
                throw new ApiException(400, "Missing required parameter 'passId' when calling PassApi->GetPass");

            var localVarPath = "/pass";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (passTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "passTypeId", passTypeId)); // query parameter
            if (passId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "passId", passId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPass", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieve the list of active pass ids for a given pass type. Retrieve the list of active pass ids for a given pass type.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns></returns>
        public void PassList (Object passTypeId, Object page = null, Object limit = null)
        {
             PassListWithHttpInfo(passTypeId, page, limit);
        }

        /// <summary>
        /// Retrieve the list of active pass ids for a given pass type. Retrieve the list of active pass ids for a given pass type.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PassListWithHttpInfo (Object passTypeId, Object page = null, Object limit = null)
        {
            // verify the required parameter 'passTypeId' is set
            if (passTypeId == null)
                throw new ApiException(400, "Missing required parameter 'passTypeId' when calling PassApi->PassList");

            var localVarPath = "/pass/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (passTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "passTypeId", passTypeId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PassList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieve the list of active pass ids for a given pass type. Retrieve the list of active pass ids for a given pass type.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PassListAsync (Object passTypeId, Object page = null, Object limit = null)
        {
             await PassListAsyncWithHttpInfo(passTypeId, page, limit);

        }

        /// <summary>
        /// Retrieve the list of active pass ids for a given pass type. Retrieve the list of active pass ids for a given pass type.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PassListAsyncWithHttpInfo (Object passTypeId, Object page = null, Object limit = null)
        {
            // verify the required parameter 'passTypeId' is set
            if (passTypeId == null)
                throw new ApiException(400, "Missing required parameter 'passTypeId' when calling PassApi->PassList");

            var localVarPath = "/pass/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (passTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "passTypeId", passTypeId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PassList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Send updates to all active passes for a given pass type. For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <returns></returns>
        public void PassSync (Object passTypeId)
        {
             PassSyncWithHttpInfo(passTypeId);
        }

        /// <summary>
        /// Send updates to all active passes for a given pass type. For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PassSyncWithHttpInfo (Object passTypeId)
        {
            // verify the required parameter 'passTypeId' is set
            if (passTypeId == null)
                throw new ApiException(400, "Missing required parameter 'passTypeId' when calling PassApi->PassSync");

            var localVarPath = "/pass/sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (passTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "passTypeId", passTypeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PassSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Send updates to all active passes for a given pass type. For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PassSyncAsync (Object passTypeId)
        {
             await PassSyncAsyncWithHttpInfo(passTypeId);

        }

        /// <summary>
        /// Send updates to all active passes for a given pass type. For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passTypeId">your pass type id, for example P963493 (Urban Fitness)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PassSyncAsyncWithHttpInfo (Object passTypeId)
        {
            // verify the required parameter 'passTypeId' is set
            if (passTypeId == null)
                throw new ApiException(400, "Missing required parameter 'passTypeId' when calling PassApi->PassSync");

            var localVarPath = "/pass/sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (passTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "passTypeId", passTypeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PassSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
